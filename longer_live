def get_non_negative_int(prompt):#definition to check that input of the user for prompt age and bpm are positive integers
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print("Please enter a positive and whole number like 18 or 72.")
            continue

        if value < 0:
            print("Sorry, your response must not be negative.")
            continue
        else:
            break
    return value

var_age = get_non_negative_int("Please enter your age: ")
my_bpm = get_non_negative_int("Please enter your heart rate in rest: ")


dic_rest_bpm={"10":69,"11":59,"ideal":50}#source= https://en.wikipedia.org/wiki/Heart_rate#Resting_heart_rate. keys are age in years. values are low range of bpm. until 10 the value is 69bpm and above 10 value is 59 bpm #ideal is considered as good rest bpm by doctors. 

print("your age is {}".format(var_age))
print("your beats per minute in rest are {}".format(my_bpm))

if var_age > 10: #simple match the input age for the dictionary key
    var_age=11
else:
    var_age=10    
#print("here is var_age = {} after matching".format(var_age))


def get_my_bpm_value(val): #definition to get the value of the rest_bpm matching to the age
    for key, value in dic_rest_bpm.items(): 
         if val == int(key): 
             return value 
  
    return "key doesn't exist"
my_optimal_bpm=get_my_bpm_value(var_age)

print("Based on your age, your optimal bpm in rest is {}".format(my_optimal_bpm))
bpm_to_gain=(my_bpm - my_optimal_bpm)
#print(bpm_to_gain)

if bpm_to_gain <= 0:
    print("You are already doing quite well for your age with {} bpm in rest. You are {} bpm lower than the optimal {} bpm in rest".format(my_bpm,bpm_to_gain, my_optimal_bpm))
else:
    print("You can win {} beats per minute".format(bpm_to_gain))



def give_bpm_roi(x):#number of heartbeats you receive when lowering current bpm with 1.
    var_hour=x*(60)
    var_day=var_hour*(24)
    var_week=var_day*(7)
    var_month=var_week*(4)
    var_year=var_week*(52)
    return {"hourly gain":var_hour, "daily gain":var_day, "monthly gain":var_month, "yearly gain":var_year}
roi_1=give_bpm_roi(1)
#print(roi_1)
roi_3=give_bpm_roi(3)
#print(roi_3)
roi_5=give_bpm_roi(5)
#print(roi_5)
roi_10=give_bpm_roi(10)
#print(roi_10)
roi_mine=give_bpm_roi(bpm_to_gain)
#print(roi_mine)

print("If you would lower your current rest bpm of {} to your optimal rest bpm of {} you would gain {} heart beats every hour".format(my_bpm,my_optimal_bpm,roi_mine["hourly gain"]))



  


#print("when I lower my current rest bpm with {a} bpm I gain {b}".format(a=))



