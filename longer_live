dic_rest_bpm={"10":69,"11":59,"ideal":50,"sport":39}#source= https://en.wikipedia.org/wiki/Heart_rate#Resting_heart_rate. keys are age in years. values are low range of bpm. until 10 the value is 69bpm and above 10 value is 59 bpm #ideal is considered as good rest bpm by doctors.


def get_non_negative_int(prompt):#definition to check that input of the user for prompt age and bpm are positive integers
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print("Please enter a positive and whole number like 18 or 72.")
            continue

        if value < 0:
            print("Sorry, your response must not be negative.")
            continue
        else:
            break
    return value

var_age = get_non_negative_int("Please enter your age: ")
my_bpm = get_non_negative_int("Please enter your heart rate in rest: ")


if var_age > 10: #simple match the input age for the dictionary key and as input for get_my_bpm_value
    var_age=11
else:
    var_age=10    

def get_my_bpm_value(val): #definition to get the value of the rest_bpm matching to the age
    for key, value in dic_rest_bpm.items(): 
         if val == int(key): 
             return value 
  
    return "key doesn't exist"
my_optimal_bpm=get_my_bpm_value(var_age)


print("Based on your age, your optimal bpm in rest is {}".format(my_optimal_bpm))
bpm_to_gain=(my_bpm - my_optimal_bpm)
ideal_bpm=dic_rest_bpm.get("ideal")
sport_bpm=dic_rest_bpm.get("sport")


def give_bpm_roi(x):#number of heartbeats you receive when lowering current bpm with 1.
    var_hour=x*(60)
    var_day=var_hour*(24)
    var_week=var_day*(7)
    var_month=var_week*(4)
    var_year=var_week*(52)
    return {"hourly gain":var_hour, "daily gain":var_day, "monthly gain":var_month, "yearly gain":var_year}


if my_bpm < sport_bpm:
    print("Are your sure {} bpm is your rest rate? {}bpm is a rest condition of well trained athletes.".format(my_bpm,sport_bpm))
elif my_bpm<=ideal_bpm:
    print("You have a great bpm in rest of {} bpm. A rest condition of {} is considered a good rest bpm".format(my_bpm,ideal_bpm))
elif bpm_to_gain <= 0:
    print("You are already doing quite well for your age with {} bpm in rest. You are {} bpm lower than the optimal {} bpm in rest".format(my_bpm,bpm_to_gain, my_optimal_bpm))    
else:
    roi_1=give_bpm_roi(1)
    #print(roi_1)
    roi_3=give_bpm_roi(3)
    #print(roi_3)
    roi_5=give_bpm_roi(5)
    #print(roi_5)
    roi_10=give_bpm_roi(10)
    #print(roi_10)
    roi_mine=give_bpm_roi(bpm_to_gain)
    #print(roi_mine)
    print("You can win {} beats per minute".format(bpm_to_gain))
    print("If you would lower your current rest bpm of {} to your optimal rest bpm of {} you would gain {} heart beats every hour".format(my_bpm,my_optimal_bpm,roi_mine["hourly gain"]))
 
 
 x1_ax=(list(roi_1.keys()))
y1_ax=(list(roi_1.values()))


x3_ax=(list(roi_3.keys()))
y3_ax=(list(roi_3.values()))
#
# x5_ax=(list(roi_5.keys()))
# y5_ax=(list(roi_5.values()))
#
# x10_ax=(list(roi_10.keys()))
# y10_ax=(list(roi_10.values()))
#
xmine_ax=(list(roi_mine.keys()))
ymine_ax=(list(roi_mine.values()))




import matplotlib.pyplot as plt

# line 1 points
x1=x1_ax
y1=y1_ax

# plotting the line 1 points
plt.plot(x1, y1, label = "1 bpm gain")

#line 2 points
x2 = xmine_ax
y2 = ymine_ax
# plotting the line 2 points
plt.plot(x2, y2, label = "your potential {} bpm".format(bpm_to_gain))

# naming the x axis
plt.xlabel('number of hearbeats you reduce')
# naming the y axis
plt.ylabel('number of heartbeats you gain')
# giving a title to my graph
plt.title('Number of heartbeats you gain in total')

# show a legend on the plot
plt.legend()

# function to show the plot
plt.show()

